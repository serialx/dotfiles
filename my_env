#!/bin/bash

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

# set PATH so it includes /usr/local/bin if it exists
if [ -d "/usr/local/bin" ] ; then
    PATH="/usr/local/bin:$PATH"
fi
if [ -d "/usr/local/sbin" ] ; then
    PATH="/usr/local/sbin:$PATH"
fi

# set Homebrew PATH
eval "$(/opt/homebrew/bin/brew shellenv)"

# Mac Homebrew completion
exists() { [ ! -z `which "$1"` ]; }
#function exists {
#    whence -w $1 > /dev/null
#}
if [ -n "`$SHELL -c 'echo $BASH_VERSION'`" ]; then
    # assume Bash
    if exists brew; then
        if [ -f `brew --prefix`/Library/Contributions/brew_bash_completion.sh ]; then
            source `brew --prefix`/Library/Contributions/brew_bash_completion.sh
        fi
    fi
fi

# EDITOR configuration (for Git and etc.)
export EDITOR=nvim

# Add .pythonrc to environment to enable syntax completion
export PYTHONSTARTUP=$HOME/.pythonrc

# Python virtualenvwrapper
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    source /usr/local/bin/virtualenvwrapper.sh
fi

# Automatic venv activation
# Support for bash
PROMPT_COMMAND='prompt'

# Mirrored support for zsh. See: https://superuser.com/questions/735660/whats-the-zsh-equivalent-of-bashs-prompt-command/735969#735969 
precmd() { eval "$PROMPT_COMMAND" }

function prompt()
{
    if [ "$PWD" != "$MYOLDPWD" ]; then
        MYOLDPWD="$PWD"
        test -d .venv && . .venv/bin/activate
    fi
}

# Amazon Web Services
#export AWS_CREDENTIAL_FILE=~/.ec2/credentials
export AWS_DEFAULT_REGION=ap-northeast-1

# TexLive
export PATH="$PATH:/usr/local/texlive/2016/bin/x86_64-darwin/"

# Golang
export GOPATH=$HOME/workspace/go
export PATH="$PATH:${GOPATH}/bin/"

# Android
export NDK_ROOT=$HOME/workspace/android-ndk-r10c
export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_SDK_ROOT/tools
export PATH=$PATH:$ANDROID_SDK_ROOT/platform-tools

# Chromium depot_tools
export PATH=$PATH:$HOME/workspace/sandbox/depot_tools

# Scala
export PATH=$PATH:$HOME/workspace/sandbox/scala-2.10.5/bin

# add cuda libraries to library path
export CUDA_HOME=/usr/local/cuda
if [[ "$DYLD_LIBRARY_PATH" != "" ]]; then
  export DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH:$CUDA_HOME/lib"
else
  export DYLD_LIBRARY_PATH="$CUDA_HOME/lib"
fi
export PATH="$PATH:$CUDA_HOME/bin"

# AWS Auto Completion
#if [[ "$OSTYPE" == "darwin"* ]]; then
#    autoload -U bashcompinit
#    bashcompinit
#    complete -C aws_completer aws
#fi

# For Python (Because Mac environment variables are out of spec)
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LANG=en_US.UTF-8

# NVM
if [ -d "$HOME/.nvm" ] ; then
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# z
if exists brew; then
    if [ -f `brew --prefix`/etc/profile.d/z.sh ]; then
        . `brew --prefix`/etc/profile.d/z.sh
    fi
fi

# secret env
if [ -f "$HOME/.secrets" ] ; then
    source $HOME/.secrets
fi

# mono (mac)
export PATH=/Library/Frameworks/Mono.framework/Versions/Current/bin/:${PATH}

# rust
export PATH="$HOME/.cargo/bin:$PATH"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/serialx/workspace/sandbox/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/serialx/workspace/sandbox/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/serialx/workspace/sandbox/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/serialx/workspace/sandbox/google-cloud-sdk/completion.zsh.inc'; fi

# SCM Breeze
[ -s "$HOME/.scm_breeze/scm_breeze.sh" ] && source "$HOME/.scm_breeze/scm_breeze.sh"

# Terraform Cache
export TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/plugin-cache"

# Ruby (Homebrew)
export PATH="/usr/local/opt/ruby/bin:$PATH"

# PDM
export PATH=/Users/serialx/Library/Python/3.11/bin:$PATH

# GPG TTY
export GPG_TTY=$(tty)

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# pipx bin path
export PATH="$HOME/.local/bin:$PATH"
